name: Test and Deploy to VM

on:
  push:
    branches:
      - deployed  

jobs:
  test:
    name: Placeholder Test Project
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code with Submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Placeholder test step
      run: echo "âœ…Tests haven't been implemented yet. Skipping......"  

  deploy:
    name: Deploy to VM
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout Code with Submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Verify and sync submodules
      run: |
        echo "Current submodule status:"
        git submodule status
        echo "Syncing submodule URLs..."
        git submodule sync --recursive
        echo "Updating submodules to exact commit references..."
        git submodule update --init --recursive
        echo "Final submodule status:"
        git submodule status
        
    - name: Verify submodule branches and commits
      run: |
        echo "=== Backend Submodule ==="
        cd routine-scheduler-backend
        echo "Branch: $(git branch --show-current)"
        echo "Latest commits:"
        git log --oneline -3
        cd ..
        echo "=== Frontend Submodule ==="
        cd routine-scheduler-frontend  
        echo "Branch: $(git branch --show-current)"
        echo "Latest commits:"
        git log --oneline -3

    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        echo "SSH key setup complete"
        
    - name: Add host to known_hosts
      run: |
        ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts || echo "Host key scan failed, continuing..."
        echo "Known hosts updated"

    - name: Test SSH Connection
      run: |
        echo "Testing SSH connection to ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}"
        ssh -i ~/.ssh/deploy_key -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "echo 'SSH connection successful'"

    - name: Check target directory
      run: |
        echo "Checking target directory structure..."
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "ls -la ${{ secrets.VM_PROJECT_PATH }}"

    - name: Copy Project to VM via rsync (with verbose output)
      run: |
        echo "Starting rsync to ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:${{ secrets.VM_PROJECT_PATH }}"
        rsync -avz --progress --delete --exclude='.git' --exclude='node_modules' --exclude='db-backups' --exclude='*.log' --exclude='.env' \
          -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
          ./ ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:${{ secrets.VM_PROJECT_PATH }}/ || {
            echo "Rsync failed with exit code $?"
            echo "Trying rsync without --delete flag..."
            rsync -avz --progress --exclude='.git' --exclude='node_modules' --exclude='db-backups' --exclude='*.log' --exclude='.env' \
              -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
              ./ ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:${{ secrets.VM_PROJECT_PATH }}/
          }

    - name: Restart Docker Compose on VM
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
          cd ${{ secrets.VM_PROJECT_PATH }}
          docker compose down
          docker compose up -d --build
        EOF
